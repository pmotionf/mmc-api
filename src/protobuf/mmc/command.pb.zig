// Code generated by protoc-gen-zig
///! package mmc.command
const std = @import("std");

const pb = @import("protobuf");
const fd = pb.fd;
/// import package protobuf
const protobuf = @import("../protobuf.pb.zig");
/// import package mmc
const mmc = @import("../mmc.pb.zig");

pub const Request = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        calibrate,
        set_zero,
        initialize,
        auto_initialize,
        deinitialize,
        move,
        pull,
        push,
        stop_pull,
        stop_push,
        release,
        clear_errors,
        remove_command,
        stop,
        pause,
        @"resume",
    };
    pub const body_union = union(_body_case) {
        calibrate: Request.Calibrate,
        set_zero: Request.SetZero,
        initialize: Request.Initialize,
        auto_initialize: Request.AutoInitialize,
        deinitialize: Request.Deinitialize,
        move: Request.Move,
        pull: Request.Pull,
        push: Request.Push,
        stop_pull: Request.StopPull,
        stop_push: Request.StopPush,
        release: Request.Release,
        clear_errors: Request.ClearErrors,
        remove_command: Request.RemoveCommand,
        stop: Request.Stop,
        pause: Request.Pause,
        @"resume": Request.Resume,
        pub const _desc_table = .{
            .calibrate = fd(1, .submessage),
            .set_zero = fd(2, .submessage),
            .initialize = fd(3, .submessage),
            .auto_initialize = fd(4, .submessage),
            .deinitialize = fd(5, .submessage),
            .move = fd(6, .submessage),
            .pull = fd(7, .submessage),
            .push = fd(8, .submessage),
            .stop_pull = fd(9, .submessage),
            .stop_push = fd(10, .submessage),
            .release = fd(11, .submessage),
            .clear_errors = fd(12, .submessage),
            .remove_command = fd(13, .submessage),
            .stop = fd(14, .submessage),
            .pause = fd(15, .submessage),
            .@"resume" = fd(16, .submessage),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub const Direction = enum(i32) {
        DIRECTION_UNSPECIFIED = 0,
        DIRECTION_BACKWARD = 1,
        DIRECTION_FORWARD = 2,
        _,
    };

    pub const Error = enum(i32) {
        COMMAND_REQUEST_ERROR_UNSPECIFIED = 0,
        COMMAND_REQUEST_ERROR_INVALID_LINE = 1,
        COMMAND_REQUEST_ERROR_INVALID_AXIS = 2,
        COMMAND_REQUEST_ERROR_INVALID_DRIVER = 3,
        COMMAND_REQUEST_ERROR_INVALID_ACCELERATION = 4,
        COMMAND_REQUEST_ERROR_INVALID_VELOCITY = 5,
        COMMAND_REQUEST_ERROR_INVALID_DIRECTION = 6,
        COMMAND_REQUEST_ERROR_INVALID_LOCATION = 7,
        COMMAND_REQUEST_ERROR_INVALID_DISTANCE = 8,
        COMMAND_REQUEST_ERROR_INVALID_CARRIER = 9,
        COMMAND_REQUEST_ERROR_MISSING_PARAMETER = 10,
        COMMAND_REQUEST_ERROR_COMMAND_NOT_FOUND = 11,
        COMMAND_REQUEST_ERROR_CARRIER_NOT_FOUND = 12,
        COMMAND_REQUEST_ERROR_CC_LINK_DISCONNECTED = 13,
        COMMAND_REQUEST_ERROR_OUT_OF_MEMORY = 14,
        COMMAND_REQUEST_ERROR_MAXIMUM_AUTO_INITIALIZE_EXCEEDED = 15,
        _,
    };

    pub const Release = struct {
        line: u32 = 0,
        carrier: ?u32 = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .carrier = fd(2, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const StopPull = struct {
        line: u32 = 0,
        axes: ?protobuf.Range = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axes = fd(2, .submessage),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const StopPush = struct {
        line: u32 = 0,
        axes: ?protobuf.Range = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axes = fd(2, .submessage),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const ClearErrors = struct {
        line: u32 = 0,
        drivers: ?protobuf.Range = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .drivers = fd(2, .submessage),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Deinitialize = struct {
        line: u32 = 0,
        axes: ?protobuf.Range = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axes = fd(2, .submessage),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Calibrate = struct {
        line: u32 = 0,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const SetZero = struct {
        line: u32 = 0,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const AutoInitialize = struct {
        lines: std.ArrayListUnmanaged(Request.AutoInitialize.Line) = .empty,

        pub const _desc_table = .{
            .lines = fd(1, .{ .repeated = .submessage }),
        };

        pub const Line = struct {
            line: u32 = 0,
            velocity: ?u32 = null,
            acceleration: ?u32 = null,

            pub const _desc_table = .{
                .line = fd(1, .{ .scalar = .uint32 }),
                .velocity = fd(2, .{ .scalar = .uint32 }),
                .acceleration = fd(3, .{ .scalar = .uint32 }),
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Move = struct {
        line: u32 = 0,
        carrier: u32 = 0,
        velocity: u32 = 0,
        acceleration: u32 = 0,
        control: mmc.Control = @enumFromInt(0),
        disable_cas: bool = false,
        target: ?target_union = null,

        pub const _target_case = enum {
            axis,
            location,
            distance,
        };
        pub const target_union = union(_target_case) {
            axis: u32,
            location: f32,
            distance: f32,
            pub const _desc_table = .{
                .axis = fd(5, .{ .scalar = .uint32 }),
                .location = fd(6, .{ .scalar = .float }),
                .distance = fd(7, .{ .scalar = .float }),
            };
        };

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .carrier = fd(2, .{ .scalar = .uint32 }),
            .velocity = fd(3, .{ .scalar = .uint32 }),
            .acceleration = fd(4, .{ .scalar = .uint32 }),
            .control = fd(8, .@"enum"),
            .disable_cas = fd(9, .{ .scalar = .bool }),
            .target = fd(null, .{ .oneof = target_union }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Push = struct {
        line: u32 = 0,
        axis: u32 = 0,
        direction: Request.Direction = @enumFromInt(0),
        velocity: u32 = 0,
        acceleration: u32 = 0,
        carrier: ?u32 = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axis = fd(2, .{ .scalar = .uint32 }),
            .direction = fd(3, .@"enum"),
            .velocity = fd(4, .{ .scalar = .uint32 }),
            .acceleration = fd(5, .{ .scalar = .uint32 }),
            .carrier = fd(6, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Pull = struct {
        line: u32 = 0,
        axis: u32 = 0,
        carrier: u32 = 0,
        direction: Request.Direction = @enumFromInt(0),
        velocity: u32 = 0,
        acceleration: u32 = 0,
        transition: ?Request.Pull.Transition = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axis = fd(2, .{ .scalar = .uint32 }),
            .carrier = fd(3, .{ .scalar = .uint32 }),
            .direction = fd(4, .@"enum"),
            .velocity = fd(5, .{ .scalar = .uint32 }),
            .acceleration = fd(6, .{ .scalar = .uint32 }),
            .transition = fd(7, .submessage),
        };

        pub const Transition = struct {
            control: mmc.Control = @enumFromInt(0),
            disable_cas: bool = false,
            target: ?target_union = null,

            pub const _target_case = enum {
                axis,
                location,
                distance,
            };
            pub const target_union = union(_target_case) {
                axis: u32,
                location: f32,
                distance: f32,
                pub const _desc_table = .{
                    .axis = fd(3, .{ .scalar = .uint32 }),
                    .location = fd(4, .{ .scalar = .float }),
                    .distance = fd(5, .{ .scalar = .float }),
                };
            };

            pub const _desc_table = .{
                .control = fd(1, .@"enum"),
                .disable_cas = fd(2, .{ .scalar = .bool }),
                .target = fd(null, .{ .oneof = target_union }),
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Initialize = struct {
        line: u32 = 0,
        axis: u32 = 0,
        carrier: u32 = 0,
        direction: Request.Direction = @enumFromInt(0),
        link_axis: ?Request.Direction = null,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .axis = fd(2, .{ .scalar = .uint32 }),
            .carrier = fd(3, .{ .scalar = .uint32 }),
            .direction = fd(4, .@"enum"),
            .link_axis = fd(5, .@"enum"),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const RemoveCommand = struct {
        command: ?u32 = null,

        pub const _desc_table = .{
            .command = fd(1, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Stop = struct {
        lines: std.ArrayListUnmanaged(u32) = .empty,

        pub const _desc_table = .{
            .lines = fd(1, .{ .packed_repeated = .{ .scalar = .uint32 } }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Pause = struct {
        lines: std.ArrayListUnmanaged(u32) = .empty,

        pub const _desc_table = .{
            .lines = fd(1, .{ .packed_repeated = .{ .scalar = .uint32 } }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Resume = struct {
        lines: std.ArrayListUnmanaged(u32) = .empty,

        pub const _desc_table = .{
            .lines = fd(1, .{ .packed_repeated = .{ .scalar = .uint32 } }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Response = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        id,
        removed_id,
        request_error,
    };
    pub const body_union = union(_body_case) {
        id: u32,
        removed_id: u32,
        request_error: Request.Error,
        pub const _desc_table = .{
            .id = fd(1, .{ .scalar = .uint32 }),
            .removed_id = fd(3, .{ .scalar = .uint32 }),
            .request_error = fd(2, .@"enum"),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};
