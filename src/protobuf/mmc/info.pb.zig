// Code generated by protoc-gen-zig
///! package mmc.info
const std = @import("std");

const pb = @import("protobuf");
const fd = pb.fd;
/// import package protobuf
const protobuf = @import("../protobuf.pb.zig");

pub const Request = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        command,
        track,
    };
    pub const body_union = union(_body_case) {
        command: Request.Command,
        track: Request.Track,
        pub const _desc_table = .{
            .command = fd(1, .submessage),
            .track = fd(2, .submessage),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub const Error = enum(i32) {
        INFO_REQUEST_ERROR_UNSPECIFIED = 0,
        INFO_REQUEST_ERROR_INVALID_LINE = 1,
        INFO_REQUEST_ERROR_INVALID_AXIS = 2,
        INFO_REQUEST_ERROR_INVALID_DRIVER = 3,
        INFO_REQUEST_ERROR_MISSING_PARAMETER = 4,
        _,
    };

    pub const Command = struct {
        id: ?u32 = null,

        pub const _desc_table = .{
            .id = fd(1, .{ .scalar = .uint32 }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Track = struct {
        line: u32 = 0,
        info_driver_state: bool = false,
        info_driver_errors: bool = false,
        info_axis_state: bool = false,
        info_axis_errors: bool = false,
        info_carrier_state: bool = false,
        filter: ?filter_union = null,

        pub const _filter_case = enum {
            drivers,
            axes,
            carriers,
        };
        pub const filter_union = union(_filter_case) {
            drivers: protobuf.Range,
            axes: protobuf.Range,
            carriers: Request.Track.Ids,
            pub const _desc_table = .{
                .drivers = fd(8, .submessage),
                .axes = fd(9, .submessage),
                .carriers = fd(10, .submessage),
            };
        };

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .info_driver_state = fd(2, .{ .scalar = .bool }),
            .info_driver_errors = fd(3, .{ .scalar = .bool }),
            .info_axis_state = fd(4, .{ .scalar = .bool }),
            .info_axis_errors = fd(5, .{ .scalar = .bool }),
            .info_carrier_state = fd(6, .{ .scalar = .bool }),
            .filter = fd(null, .{ .oneof = filter_union }),
        };

        pub const Ids = struct {
            ids: std.ArrayListUnmanaged(u32) = .empty,

            pub const _desc_table = .{
                .ids = fd(1, .{ .packed_repeated = .{ .scalar = .uint32 } }),
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Response = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        command,
        track,
        request_error,
    };
    pub const body_union = union(_body_case) {
        command: Response.Commands,
        track: Response.Track,
        request_error: Request.Error,
        pub const _desc_table = .{
            .command = fd(1, .submessage),
            .track = fd(2, .submessage),
            .request_error = fd(3, .@"enum"),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub const Commands = struct {
        items: std.ArrayListUnmanaged(Response.Command) = .empty,

        pub const _desc_table = .{
            .items = fd(1, .{ .repeated = .submessage }),
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Command = struct {
        id: u32 = 0,
        status: Response.Command.Status = @enumFromInt(0),
        @"error": ?Response.Command.Error = null,

        pub const _desc_table = .{
            .id = fd(1, .{ .scalar = .uint32 }),
            .status = fd(2, .@"enum"),
            .@"error" = fd(3, .@"enum"),
        };

        pub const Status = enum(i32) {
            COMMAND_STATUS_UNSPECIFIED = 0,
            COMMAND_STATUS_PROGRESSING = 1,
            COMMAND_STATUS_COMPLETED = 2,
            COMMAND_STATUS_FAILED = 3,
            _,
        };

        pub const Error = enum(i32) {
            COMMAND_ERROR_UNSPECIFIED = 0,
            COMMAND_ERROR_INVALID_SYSTEM_STATE = 1,
            COMMAND_ERROR_DRIVER_DISCONNECTED = 3,
            COMMAND_ERROR_UNEXPECTED = 4,
            COMMAND_ERROR_CARRIER_NOT_FOUND = 5,
            COMMAND_ERROR_CARRIER_ALREADY_EXISTS = 6,
            COMMAND_ERROR_DRIVER_STOPPED = 7,
            _,
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub const Track = struct {
        line: u32 = 0,
        driver_state: std.ArrayListUnmanaged(Response.Track.Driver.State) = .empty,
        driver_errors: std.ArrayListUnmanaged(Response.Track.Driver.Error) = .empty,
        axis_state: std.ArrayListUnmanaged(Response.Track.Axis.State) = .empty,
        axis_errors: std.ArrayListUnmanaged(Response.Track.Axis.Error) = .empty,
        carrier_state: std.ArrayListUnmanaged(Response.Track.Carrier.State) = .empty,

        pub const _desc_table = .{
            .line = fd(1, .{ .scalar = .uint32 }),
            .driver_state = fd(2, .{ .repeated = .submessage }),
            .driver_errors = fd(3, .{ .repeated = .submessage }),
            .axis_state = fd(4, .{ .repeated = .submessage }),
            .axis_errors = fd(5, .{ .repeated = .submessage }),
            .carrier_state = fd(6, .{ .repeated = .submessage }),
        };

        pub const Axis = struct {
            pub const _desc_table = .{};

            pub const State = struct {
                id: u32 = 0,
                motor_active: bool = false,
                waiting_pull: bool = false,
                waiting_push: bool = false,
                carrier: u32 = 0,
                hall_alarm_back: bool = false,
                hall_alarm_front: bool = false,

                pub const _desc_table = .{
                    .id = fd(1, .{ .scalar = .uint32 }),
                    .motor_active = fd(2, .{ .scalar = .bool }),
                    .waiting_pull = fd(3, .{ .scalar = .bool }),
                    .waiting_push = fd(4, .{ .scalar = .bool }),
                    .carrier = fd(5, .{ .scalar = .uint32 }),
                    .hall_alarm_back = fd(6, .{ .scalar = .bool }),
                    .hall_alarm_front = fd(7, .{ .scalar = .bool }),
                };

                pub fn encode(
                    self: @This(),
                    writer: *std.Io.Writer,
                    allocator: std.mem.Allocator,
                ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                    return pb.encode(writer, allocator, self);
                }

                pub fn decode(
                    reader: *std.Io.Reader,
                    allocator: std.mem.Allocator,
                ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                    return pb.decode(@This(), reader, allocator);
                }

                pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                    return pb.deinit(allocator, self);
                }

                pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                    return pb.dupe(@This(), self, allocator);
                }

                pub fn jsonDecode(
                    input: []const u8,
                    options: std.json.ParseOptions,
                    allocator: std.mem.Allocator,
                ) !std.json.Parsed(@This()) {
                    return pb.json.decode(@This(), input, options, allocator);
                }

                pub fn jsonEncode(
                    self: @This(),
                    options: std.json.Stringify.Options,
                    allocator: std.mem.Allocator,
                ) ![]const u8 {
                    return pb.json.encode(self, options, allocator);
                }

                // This method is used by std.json
                // internally for deserialization. DO NOT RENAME!
                pub fn jsonParse(
                    allocator: std.mem.Allocator,
                    source: anytype,
                    options: std.json.ParseOptions,
                ) !@This() {
                    return pb.json.parse(@This(), allocator, source, options);
                }

                // This method is used by std.json
                // internally for serialization. DO NOT RENAME!
                pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                    return pb.json.stringify(@This(), self, jws);
                }
            };

            pub const Error = struct {
                id: u32 = 0,
                overcurrent: bool = false,

                pub const _desc_table = .{
                    .id = fd(1, .{ .scalar = .uint32 }),
                    .overcurrent = fd(2, .{ .scalar = .bool }),
                };

                pub fn encode(
                    self: @This(),
                    writer: *std.Io.Writer,
                    allocator: std.mem.Allocator,
                ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                    return pb.encode(writer, allocator, self);
                }

                pub fn decode(
                    reader: *std.Io.Reader,
                    allocator: std.mem.Allocator,
                ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                    return pb.decode(@This(), reader, allocator);
                }

                pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                    return pb.deinit(allocator, self);
                }

                pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                    return pb.dupe(@This(), self, allocator);
                }

                pub fn jsonDecode(
                    input: []const u8,
                    options: std.json.ParseOptions,
                    allocator: std.mem.Allocator,
                ) !std.json.Parsed(@This()) {
                    return pb.json.decode(@This(), input, options, allocator);
                }

                pub fn jsonEncode(
                    self: @This(),
                    options: std.json.Stringify.Options,
                    allocator: std.mem.Allocator,
                ) ![]const u8 {
                    return pb.json.encode(self, options, allocator);
                }

                // This method is used by std.json
                // internally for deserialization. DO NOT RENAME!
                pub fn jsonParse(
                    allocator: std.mem.Allocator,
                    source: anytype,
                    options: std.json.ParseOptions,
                ) !@This() {
                    return pb.json.parse(@This(), allocator, source, options);
                }

                // This method is used by std.json
                // internally for serialization. DO NOT RENAME!
                pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                    return pb.json.stringify(@This(), self, jws);
                }
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub const Driver = struct {
            pub const _desc_table = .{};

            pub const State = struct {
                id: u32 = 0,
                connected: bool = false,
                busy: bool = false,
                motor_disabled: bool = false,
                stopped: bool = false,
                paused: bool = false,

                pub const _desc_table = .{
                    .id = fd(1, .{ .scalar = .uint32 }),
                    .connected = fd(2, .{ .scalar = .bool }),
                    .busy = fd(3, .{ .scalar = .bool }),
                    .motor_disabled = fd(4, .{ .scalar = .bool }),
                    .stopped = fd(5, .{ .scalar = .bool }),
                    .paused = fd(6, .{ .scalar = .bool }),
                };

                pub fn encode(
                    self: @This(),
                    writer: *std.Io.Writer,
                    allocator: std.mem.Allocator,
                ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                    return pb.encode(writer, allocator, self);
                }

                pub fn decode(
                    reader: *std.Io.Reader,
                    allocator: std.mem.Allocator,
                ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                    return pb.decode(@This(), reader, allocator);
                }

                pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                    return pb.deinit(allocator, self);
                }

                pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                    return pb.dupe(@This(), self, allocator);
                }

                pub fn jsonDecode(
                    input: []const u8,
                    options: std.json.ParseOptions,
                    allocator: std.mem.Allocator,
                ) !std.json.Parsed(@This()) {
                    return pb.json.decode(@This(), input, options, allocator);
                }

                pub fn jsonEncode(
                    self: @This(),
                    options: std.json.Stringify.Options,
                    allocator: std.mem.Allocator,
                ) ![]const u8 {
                    return pb.json.encode(self, options, allocator);
                }

                // This method is used by std.json
                // internally for deserialization. DO NOT RENAME!
                pub fn jsonParse(
                    allocator: std.mem.Allocator,
                    source: anytype,
                    options: std.json.ParseOptions,
                ) !@This() {
                    return pb.json.parse(@This(), allocator, source, options);
                }

                // This method is used by std.json
                // internally for serialization. DO NOT RENAME!
                pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                    return pb.json.stringify(@This(), self, jws);
                }
            };

            pub const Error = struct {
                id: u32 = 0,
                control_loop_time_exceeded: bool = false,
                inverter_overheat: bool = false,
                undervoltage: bool = false,
                overvoltage: bool = false,
                comm_error_prev: bool = false,
                comm_error_next: bool = false,

                pub const _desc_table = .{
                    .id = fd(1, .{ .scalar = .uint32 }),
                    .control_loop_time_exceeded = fd(2, .{ .scalar = .bool }),
                    .inverter_overheat = fd(3, .{ .scalar = .bool }),
                    .undervoltage = fd(4, .{ .scalar = .bool }),
                    .overvoltage = fd(5, .{ .scalar = .bool }),
                    .comm_error_prev = fd(6, .{ .scalar = .bool }),
                    .comm_error_next = fd(7, .{ .scalar = .bool }),
                };

                pub fn encode(
                    self: @This(),
                    writer: *std.Io.Writer,
                    allocator: std.mem.Allocator,
                ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                    return pb.encode(writer, allocator, self);
                }

                pub fn decode(
                    reader: *std.Io.Reader,
                    allocator: std.mem.Allocator,
                ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                    return pb.decode(@This(), reader, allocator);
                }

                pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                    return pb.deinit(allocator, self);
                }

                pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                    return pb.dupe(@This(), self, allocator);
                }

                pub fn jsonDecode(
                    input: []const u8,
                    options: std.json.ParseOptions,
                    allocator: std.mem.Allocator,
                ) !std.json.Parsed(@This()) {
                    return pb.json.decode(@This(), input, options, allocator);
                }

                pub fn jsonEncode(
                    self: @This(),
                    options: std.json.Stringify.Options,
                    allocator: std.mem.Allocator,
                ) ![]const u8 {
                    return pb.json.encode(self, options, allocator);
                }

                // This method is used by std.json
                // internally for deserialization. DO NOT RENAME!
                pub fn jsonParse(
                    allocator: std.mem.Allocator,
                    source: anytype,
                    options: std.json.ParseOptions,
                ) !@This() {
                    return pb.json.parse(@This(), allocator, source, options);
                }

                // This method is used by std.json
                // internally for serialization. DO NOT RENAME!
                pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                    return pb.json.stringify(@This(), self, jws);
                }
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub const Carrier = struct {
            pub const _desc_table = .{};

            pub const State = struct {
                id: u32 = 0,
                position: f32 = 0,
                axis_main: u32 = 0,
                axis_auxiliary: ?u32 = null,
                cas_disabled: bool = false,
                cas_triggered: bool = false,
                state: Response.Track.Carrier.State.State = @enumFromInt(0),

                pub const _desc_table = .{
                    .id = fd(1, .{ .scalar = .uint32 }),
                    .position = fd(2, .{ .scalar = .float }),
                    .axis_main = fd(3, .{ .scalar = .uint32 }),
                    .axis_auxiliary = fd(4, .{ .scalar = .uint32 }),
                    .cas_disabled = fd(5, .{ .scalar = .bool }),
                    .cas_triggered = fd(6, .{ .scalar = .bool }),
                    .state = fd(7, .@"enum"),
                };

                pub const State = enum(i32) {
                    CARRIER_STATE_NONE = 0,
                    CARRIER_STATE_CALIBRATING = 1,
                    CARRIER_STATE_CALIBRATE_COMPLETED = 2,
                    CARRIER_STATE_MOVING = 3,
                    CARRIER_STATE_MOVE_COMPLETED = 4,
                    CARRIER_STATE_INITIALIZING = 5,
                    CARRIER_STATE_INITIALIZE_COMPLETED = 6,
                    CARRIER_STATE_PUSHING = 7,
                    CARRIER_STATE_PUSH_COMPLETED = 8,
                    CARRIER_STATE_PULLING = 9,
                    CARRIER_STATE_PULL_COMPLETED = 10,
                    CARRIER_STATE_OVERCURRENT = 11,
                    _,
                };

                pub fn encode(
                    self: @This(),
                    writer: *std.Io.Writer,
                    allocator: std.mem.Allocator,
                ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                    return pb.encode(writer, allocator, self);
                }

                pub fn decode(
                    reader: *std.Io.Reader,
                    allocator: std.mem.Allocator,
                ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                    return pb.decode(@This(), reader, allocator);
                }

                pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                    return pb.deinit(allocator, self);
                }

                pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                    return pb.dupe(@This(), self, allocator);
                }

                pub fn jsonDecode(
                    input: []const u8,
                    options: std.json.ParseOptions,
                    allocator: std.mem.Allocator,
                ) !std.json.Parsed(@This()) {
                    return pb.json.decode(@This(), input, options, allocator);
                }

                pub fn jsonEncode(
                    self: @This(),
                    options: std.json.Stringify.Options,
                    allocator: std.mem.Allocator,
                ) ![]const u8 {
                    return pb.json.encode(self, options, allocator);
                }

                // This method is used by std.json
                // internally for deserialization. DO NOT RENAME!
                pub fn jsonParse(
                    allocator: std.mem.Allocator,
                    source: anytype,
                    options: std.json.ParseOptions,
                ) !@This() {
                    return pb.json.parse(@This(), allocator, source, options);
                }

                // This method is used by std.json
                // internally for serialization. DO NOT RENAME!
                pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                    return pb.json.stringify(@This(), self, jws);
                }
            };

            pub fn encode(
                self: @This(),
                writer: *std.Io.Writer,
                allocator: std.mem.Allocator,
            ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
                return pb.encode(writer, allocator, self);
            }

            pub fn decode(
                reader: *std.Io.Reader,
                allocator: std.mem.Allocator,
            ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
                return pb.decode(@This(), reader, allocator);
            }

            pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
                return pb.deinit(allocator, self);
            }

            pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
                return pb.dupe(@This(), self, allocator);
            }

            pub fn jsonDecode(
                input: []const u8,
                options: std.json.ParseOptions,
                allocator: std.mem.Allocator,
            ) !std.json.Parsed(@This()) {
                return pb.json.decode(@This(), input, options, allocator);
            }

            pub fn jsonEncode(
                self: @This(),
                options: std.json.Stringify.Options,
                allocator: std.mem.Allocator,
            ) ![]const u8 {
                return pb.json.encode(self, options, allocator);
            }

            // This method is used by std.json
            // internally for deserialization. DO NOT RENAME!
            pub fn jsonParse(
                allocator: std.mem.Allocator,
                source: anytype,
                options: std.json.ParseOptions,
            ) !@This() {
                return pb.json.parse(@This(), allocator, source, options);
            }

            // This method is used by std.json
            // internally for serialization. DO NOT RENAME!
            pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
                return pb.json.stringify(@This(), self, jws);
            }
        };

        pub fn encode(
            self: @This(),
            writer: *std.Io.Writer,
            allocator: std.mem.Allocator,
        ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
            return pb.encode(writer, allocator, self);
        }

        pub fn decode(
            reader: *std.Io.Reader,
            allocator: std.mem.Allocator,
        ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
            return pb.decode(@This(), reader, allocator);
        }

        pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
            return pb.deinit(allocator, self);
        }

        pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
            return pb.dupe(@This(), self, allocator);
        }

        pub fn jsonDecode(
            input: []const u8,
            options: std.json.ParseOptions,
            allocator: std.mem.Allocator,
        ) !std.json.Parsed(@This()) {
            return pb.json.decode(@This(), input, options, allocator);
        }

        pub fn jsonEncode(
            self: @This(),
            options: std.json.Stringify.Options,
            allocator: std.mem.Allocator,
        ) ![]const u8 {
            return pb.json.encode(self, options, allocator);
        }

        // This method is used by std.json
        // internally for deserialization. DO NOT RENAME!
        pub fn jsonParse(
            allocator: std.mem.Allocator,
            source: anytype,
            options: std.json.ParseOptions,
        ) !@This() {
            return pb.json.parse(@This(), allocator, source, options);
        }

        // This method is used by std.json
        // internally for serialization. DO NOT RENAME!
        pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
            return pb.json.stringify(@This(), self, jws);
        }
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};
