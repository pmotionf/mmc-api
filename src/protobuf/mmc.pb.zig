// Code generated by protoc-gen-zig
///! package mmc
const std = @import("std");

const pb = @import("protobuf");
const fd = pb.fd;
/// import package mmc.core
pub const core = @import("mmc/core.pb.zig");
/// import package mmc.command
pub const command = @import("mmc/command.pb.zig");
/// import package mmc.info
pub const info = @import("mmc/info.pb.zig");

pub const Control = enum(i32) {
    CONTROL_UNSPECIFIED = 0,
    CONTROL_POSITION = 1,
    CONTROL_VELOCITY = 2,
    _,
};

pub const Request = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        core,
        command,
        info,
    };
    pub const body_union = union(_body_case) {
        core: core.Request,
        command: command.Request,
        info: info.Request,
        pub const _desc_table = .{
            .core = fd(1, .submessage),
            .command = fd(2, .submessage),
            .info = fd(3, .submessage),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub const Error = enum(i32) {
        MMC_REQUEST_ERROR_UNSPECIFIED = 0,
        MMC_REQUEST_ERROR_INVALID_MESSAGE = 1,
        _,
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};

pub const Response = struct {
    body: ?body_union = null,

    pub const _body_case = enum {
        core,
        command,
        info,
        request_error,
    };
    pub const body_union = union(_body_case) {
        core: core.Response,
        command: command.Response,
        info: info.Response,
        request_error: Request.Error,
        pub const _desc_table = .{
            .core = fd(1, .submessage),
            .command = fd(2, .submessage),
            .info = fd(3, .submessage),
            .request_error = fd(4, .@"enum"),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .oneof = body_union }),
    };

    pub fn encode(
        self: @This(),
        writer: *std.Io.Writer,
        allocator: std.mem.Allocator,
    ) (std.Io.Writer.Error || std.mem.Allocator.Error)!void {
        return pb.encode(writer, allocator, self);
    }

    pub fn decode(
        reader: *std.Io.Reader,
        allocator: std.mem.Allocator,
    ) (pb.DecodingError || std.Io.Reader.Error || std.mem.Allocator.Error)!@This() {
        return pb.decode(@This(), reader, allocator);
    }

    pub fn deinit(self: *@This(), allocator: std.mem.Allocator) void {
        return pb.deinit(allocator, self);
    }

    pub fn dupe(self: @This(), allocator: std.mem.Allocator) std.mem.Allocator.Error!@This() {
        return pb.dupe(@This(), self, allocator);
    }

    pub fn jsonDecode(
        input: []const u8,
        options: std.json.ParseOptions,
        allocator: std.mem.Allocator,
    ) !std.json.Parsed(@This()) {
        return pb.json.decode(@This(), input, options, allocator);
    }

    pub fn jsonEncode(
        self: @This(),
        options: std.json.Stringify.Options,
        allocator: std.mem.Allocator,
    ) ![]const u8 {
        return pb.json.encode(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: std.mem.Allocator,
        source: anytype,
        options: std.json.ParseOptions,
    ) !@This() {
        return pb.json.parse(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return pb.json.stringify(@This(), self, jws);
    }
};
