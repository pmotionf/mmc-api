// Code generated by protoc-gen-zig
///! package mmc.info
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;

pub const Request = struct {
    body: ?body_union,

    pub const _body_case = enum {
        command,
        carrier,
        axis,
        driver,
    };
    pub const body_union = union(_body_case) {
        command: Request.Command,
        carrier: Request.Carrier,
        axis: Request.Axis,
        driver: Request.Driver,
        pub const _union_desc = .{
            .command = fd(20, .{ .SubMessage = {} }),
            .carrier = fd(22, .{ .SubMessage = {} }),
            .axis = fd(26, .{ .SubMessage = {} }),
            .driver = fd(27, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .OneOf = body_union }),
    };

    pub const Command = struct {
        id: ?u32 = null,

        pub const _desc_table = .{
            .id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Carrier = struct {
        line_id: u32 = 0,
        param: ?param_union,

        pub const _param_case = enum {
            carrier_id,
            axis_id,
        };
        pub const param_union = union(_param_case) {
            carrier_id: u32,
            axis_id: u32,
            pub const _union_desc = .{
                .carrier_id = fd(2, .{ .Varint = .Simple }),
                .axis_id = fd(3, .{ .Varint = .Simple }),
            };
        };

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
            .param = fd(null, .{ .OneOf = param_union }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Axis = struct {
        line_id: u32 = 0,
        range: ?Request.Axis.Range = null,

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
            .range = fd(2, .{ .SubMessage = {} }),
        };

        pub const Range = struct {
            start_id: u32 = 0,
            end_id: u32 = 0,

            pub const _desc_table = .{
                .start_id = fd(1, .{ .Varint = .Simple }),
                .end_id = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Driver = struct {
        line_id: u32 = 0,
        range: ?Request.Driver.Range = null,

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
            .range = fd(2, .{ .SubMessage = {} }),
        };

        pub const Range = struct {
            start_id: u32 = 0,
            end_id: u32 = 0,

            pub const _desc_table = .{
                .start_id = fd(1, .{ .Varint = .Simple }),
                .end_id = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Response = struct {
    body: ?body_union,

    pub const _body_case = enum {
        command,
        commands,
        carrier,
        axis,
        driver,
        request_error,
    };
    pub const body_union = union(_body_case) {
        command: Response.Command,
        commands: Response.Commands,
        carrier: Response.Carrier,
        axis: Response.Axes,
        driver: Response.Drivers,
        request_error: Response.RequestErrorKind,
        pub const _union_desc = .{
            .command = fd(1, .{ .SubMessage = {} }),
            .commands = fd(2, .{ .SubMessage = {} }),
            .carrier = fd(3, .{ .SubMessage = {} }),
            .axis = fd(4, .{ .SubMessage = {} }),
            .driver = fd(5, .{ .SubMessage = {} }),
            .request_error = fd(6, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .body = fd(null, .{ .OneOf = body_union }),
    };

    pub const RequestErrorKind = enum(i32) {
        INFO_REQUEST_ERROR_UNSPECIFIED = 0,
        INFO_REQUEST_ERROR_INVALID_LINE = 1,
        INFO_REQUEST_ERROR_INVALID_AXIS = 2,
        INFO_REQUEST_ERROR_INVALID_DRIVER = 3,
        INFO_REQUEST_ERROR_CARRIER_NOT_FOUND = 4,
        INFO_REQUEST_ERROR_CC_LINK_DISCONNECTED = 5,
        INFO_REQUEST_ERROR_MISSING_PARAMETER = 6,
        INFO_REQUEST_ERROR_COMMAND_NOT_FOUND = 7,
        _,
    };

    pub const Command = struct {
        id: u32 = 0,
        status: Response.Command.Status = @enumFromInt(0),
        error_response: ?Response.Command.ErrorKind = null,

        pub const _desc_table = .{
            .id = fd(1, .{ .Varint = .Simple }),
            .status = fd(2, .{ .Varint = .Simple }),
            .error_response = fd(3, .{ .Varint = .Simple }),
        };

        pub const Status = enum(i32) {
            STATUS_UNSPECIFIED = 0,
            STATUS_PROGRESSING = 1,
            STATUS_COMPLETED = 2,
            STATUS_FAILED = 3,
            STATUS_QUEUED = 4,
            _,
        };

        pub const ErrorKind = enum(i32) {
            ERROR_KIND_UNSPECIFIED = 0,
            ERROR_KIND_INVALID_COMMAND = 1,
            ERROR_KIND_CARRIER_NOT_FOUND = 2,
            ERROR_KIND_HOMING_FAILED = 3,
            ERROR_KIND_INVALID_PARAMETER = 4,
            ERROR_KIND_INVALID_SYSTEM_STATE = 5,
            ERROR_KIND_CARRIER_ALREADY_EXISTS = 6,
            ERROR_KIND_INVALID_AXIS = 7,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Commands = struct {
        commands: ArrayList(Response.Command),

        pub const _desc_table = .{
            .commands = fd(1, .{ .List = .{ .SubMessage = {} } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Axes = struct {
        line_id: u32 = 0,
        axes: ArrayList(Response.Axes.Axis),

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
            .axes = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const Axis = struct {
            hall_alarm: ?Response.Axes.Axis.HallAlarm = null,
            motor_enabled: bool = false,
            waiting_pull: bool = false,
            waiting_push: bool = false,
            errors: ?Response.Axes.Axis.AxisError = null,
            carrier_id: u32 = 0,
            id: u32 = 0,

            pub const _desc_table = .{
                .hall_alarm = fd(1, .{ .SubMessage = {} }),
                .motor_enabled = fd(2, .{ .Varint = .Simple }),
                .waiting_pull = fd(3, .{ .Varint = .Simple }),
                .waiting_push = fd(4, .{ .Varint = .Simple }),
                .errors = fd(5, .{ .SubMessage = {} }),
                .carrier_id = fd(6, .{ .Varint = .Simple }),
                .id = fd(7, .{ .Varint = .Simple }),
            };

            pub const AxisError = struct {
                overcurrent: bool = false,

                pub const _desc_table = .{
                    .overcurrent = fd(1, .{ .Varint = .Simple }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const HallAlarm = struct {
                front: bool = false,
                back: bool = false,

                pub const _desc_table = .{
                    .front = fd(1, .{ .Varint = .Simple }),
                    .back = fd(2, .{ .Varint = .Simple }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Drivers = struct {
        line_id: u32 = 0,
        drivers: ArrayList(Response.Drivers.Driver),

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
            .drivers = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const Driver = struct {
            connected: bool = false,
            available: bool = false,
            servo_enabled: bool = false,
            stopped: bool = false,
            paused: bool = false,
            errors: ?Response.Drivers.Driver.DriverError = null,
            id: u32 = 0,

            pub const _desc_table = .{
                .connected = fd(1, .{ .Varint = .Simple }),
                .available = fd(2, .{ .Varint = .Simple }),
                .servo_enabled = fd(3, .{ .Varint = .Simple }),
                .stopped = fd(4, .{ .Varint = .Simple }),
                .paused = fd(5, .{ .Varint = .Simple }),
                .errors = fd(6, .{ .SubMessage = {} }),
                .id = fd(7, .{ .Varint = .Simple }),
            };

            pub const DriverError = struct {
                control_loop_time_exceeded: bool = false,
                power_error: ?Response.Drivers.Driver.DriverError.PowerError = null,
                inverter_overheat: bool = false,
                communication_error: ?Response.Drivers.Driver.DriverError.CommError = null,

                pub const _desc_table = .{
                    .control_loop_time_exceeded = fd(1, .{ .Varint = .Simple }),
                    .power_error = fd(2, .{ .SubMessage = {} }),
                    .inverter_overheat = fd(3, .{ .Varint = .Simple }),
                    .communication_error = fd(4, .{ .SubMessage = {} }),
                };

                pub const PowerError = struct {
                    overvoltage: bool = false,
                    undervoltage: bool = false,

                    pub const _desc_table = .{
                        .overvoltage = fd(1, .{ .Varint = .Simple }),
                        .undervoltage = fd(2, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const CommError = struct {
                    from_prev: bool = false,
                    from_next: bool = false,

                    pub const _desc_table = .{
                        .from_prev = fd(1, .{ .Varint = .Simple }),
                        .from_next = fd(2, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Carrier = struct {
        main_axis_id: u32 = 0,
        aux_axis_id: u32 = 0,
        line_id: u32 = 0,
        position: f32 = 0,
        id: u32 = 0,
        state: Response.Carrier.State = @enumFromInt(0),
        is_cas_triggered: bool = false,

        pub const _desc_table = .{
            .main_axis_id = fd(1, .{ .Varint = .Simple }),
            .aux_axis_id = fd(2, .{ .Varint = .Simple }),
            .line_id = fd(4, .{ .Varint = .Simple }),
            .position = fd(5, .{ .FixedInt = .I32 }),
            .id = fd(6, .{ .Varint = .Simple }),
            .state = fd(7, .{ .Varint = .Simple }),
            .is_cas_triggered = fd(8, .{ .Varint = .Simple }),
        };

        pub const State = enum(i32) {
            CARRIER_STATE_NONE = 0,
            CARRIER_STATE_WARMUP_PROGRESSING = 1,
            CARRIER_STATE_WARMUP_COMPLETED = 2,
            CARRIER_STATE_POS_MOVE_PROGRESSING = 3,
            CARRIER_STATE_POS_MOVE_COMPLETED = 4,
            CARRIER_STATE_SPD_MOVE_PROGRESSING = 5,
            CARRIER_STATE_SPD_MOVE_COMPLETED = 6,
            CARRIER_STATE_AUXILIARY = 7,
            CARRIER_STATE_AUXILIARY_COMPLETED = 8,
            CARRIER_STATE_FORWARD_CALIBRATION_PROGRESSING = 9,
            CARRIER_STATE_FORWARD_CALIBRATION_COMPLETED = 10,
            CARRIER_STATE_BACKWARD_CALIBRATION_PROGRESSING = 11,
            CARRIER_STATE_BACKWARD_CALIBRATION_COMPLETED = 12,
            CARRIER_STATE_FORWARD_ISOLATION_PROGRESSING = 13,
            CARRIER_STATE_FORWARD_ISOLATION_COMPLETED = 14,
            CARRIER_STATE_BACKWARD_ISOLATION_PROGRESSING = 15,
            CARRIER_STATE_BACKWARD_ISOLATION_COMPLETED = 16,
            CARRIER_STATE_FORWARD_RESTART_PROGRESSING = 17,
            CARRIER_STATE_FORWARD_RESTART_COMPLETED = 18,
            CARRIER_STATE_BACKWARD_RESTART_PROGRESSING = 19,
            CARRIER_STATE_BACKWARD_RESTART_COMPLETED = 20,
            CARRIER_STATE_PULL_FORWARD = 21,
            CARRIER_STATE_PULL_FORWARD_COMPLETED = 22,
            CARRIER_STATE_PULL_BACKWARD = 23,
            CARRIER_STATE_PULL_BACKWARD_COMPLETED = 24,
            CARRIER_STATE_PUSH = 25,
            CARRIER_STATE_PUSH_COMPLETED = 26,
            CARRIER_STATE_OVERCURRENT = 27,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
