// Code generated by protoc-gen-zig
///! package mmc
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;

pub const MessageType = enum(i32) {
    MESSAGE_TYPE_UNSPECIFIED = 0,
    SEND_COMMAND = 1,
    LINE_CONFIG = 2,
    SERVER_VERSION = 3,
    HALL_STATUS = 4,
    CARRIER_STATUS = 5,
    COMMAND_STATUS = 6,
    REGISTER_X = 7,
    REGISTER_Y = 8,
    REGISTER_WW = 9,
    REGISTER_WR = 10,
    _,
};

pub const SendCommand = struct {
    message_type: MessageType = @enumFromInt(0),
    command_kind: ?command_kind_union,

    pub const _command_kind_case = enum {
        get_x,
        get_y,
        get_wr,
        get_ww,
        get_status,
        get_version,
        clear_errors,
        clear_carrier_info,
        reset_mcl,
        release_axis_servo,
        set_command,
        stop_pull_carrier,
        auto_initialize,
        stop_push_carrier,
    };
    pub const command_kind_union = union(_command_kind_case) {
        get_x: GetX,
        get_y: GetY,
        get_wr: GetWr,
        get_ww: GetWw,
        get_status: GetStatus,
        get_version: NoParam,
        clear_errors: ClearErrors,
        clear_carrier_info: ClearCarrierInfo,
        reset_mcl: NoParam,
        release_axis_servo: ReleaseAxisServo,
        set_command: SetCommand,
        stop_pull_carrier: StopPullCarrier,
        auto_initialize: AutoInitialize,
        stop_push_carrier: StopPushCarrier,
        pub const _union_desc = .{
            .get_x = fd(1, .{ .SubMessage = {} }),
            .get_y = fd(2, .{ .SubMessage = {} }),
            .get_wr = fd(3, .{ .SubMessage = {} }),
            .get_ww = fd(4, .{ .SubMessage = {} }),
            .get_status = fd(5, .{ .SubMessage = {} }),
            .get_version = fd(6, .{ .SubMessage = {} }),
            .clear_errors = fd(7, .{ .SubMessage = {} }),
            .clear_carrier_info = fd(8, .{ .SubMessage = {} }),
            .reset_mcl = fd(9, .{ .SubMessage = {} }),
            .release_axis_servo = fd(10, .{ .SubMessage = {} }),
            .set_command = fd(11, .{ .SubMessage = {} }),
            .stop_pull_carrier = fd(12, .{ .SubMessage = {} }),
            .auto_initialize = fd(13, .{ .SubMessage = {} }),
            .stop_push_carrier = fd(15, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .message_type = fd(14, .{ .Varint = .Simple }),
        .command_kind = fd(null, .{ .OneOf = command_kind_union }),
    };

    pub const GetX = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const GetY = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const GetWr = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const GetWw = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ReleaseAxisServo = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const StopPullCarrier = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const StopPushCarrier = struct {
        line_idx: i32 = 0,
        axis_idx: i32 = 0,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ClearErrors = struct {
        line_idx: i32 = 0,
        axis_idx: ?i32 = null,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ClearCarrierInfo = struct {
        line_idx: i32 = 0,
        axis_idx: ?i32 = null,

        pub const _desc_table = .{
            .line_idx = fd(1, .{ .Varint = .Simple }),
            .axis_idx = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const GetStatus = struct {
        status_kind: ?status_kind_union,

        pub const _status_kind_case = enum {
            carrier,
            hall,
            command,
        };
        pub const status_kind_union = union(_status_kind_case) {
            carrier: Carrier,
            hall: Hall,
            command: Command,
            pub const _union_desc = .{
                .carrier = fd(1, .{ .SubMessage = {} }),
                .hall = fd(2, .{ .SubMessage = {} }),
                .command = fd(3, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .status_kind = fd(null, .{ .OneOf = status_kind_union }),
        };

        pub const Carrier = struct {
            line_idx: i32 = 0,
            axis_idx: ?i32 = null,
            carrier_id: ?i32 = null,

            pub const _desc_table = .{
                .line_idx = fd(1, .{ .Varint = .Simple }),
                .axis_idx = fd(2, .{ .Varint = .Simple }),
                .carrier_id = fd(3, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const Hall = struct {
            line_idx: i32 = 0,
            axis_idx: ?i32 = null,

            pub const _desc_table = .{
                .line_idx = fd(1, .{ .Varint = .Simple }),
                .axis_idx = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const Command = struct {
            line_idx: i32 = 0,

            pub const _desc_table = .{
                .line_idx = fd(1, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const NoParam = struct {
        pub const _desc_table = .{};

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SetCommand = struct {
        command_code: RegisterWw.CommandCode = @enumFromInt(0),
        line_idx: i32 = 0,
        axis_idx: ?i32 = null,
        carrier_id: ?i32 = null,
        location_distance: ?f32 = null,
        speed: ?i32 = null,
        acceleration: ?i32 = null,
        link_axis: ?Direction = null,
        use_sensor: ?Direction = null,

        pub const _desc_table = .{
            .command_code = fd(1, .{ .Varint = .Simple }),
            .line_idx = fd(2, .{ .Varint = .Simple }),
            .axis_idx = fd(3, .{ .Varint = .Simple }),
            .carrier_id = fd(4, .{ .Varint = .Simple }),
            .location_distance = fd(5, .{ .FixedInt = .I32 }),
            .speed = fd(6, .{ .Varint = .Simple }),
            .acceleration = fd(7, .{ .Varint = .Simple }),
            .link_axis = fd(8, .{ .Varint = .Simple }),
            .use_sensor = fd(9, .{ .Varint = .Simple }),
        };

        pub const Direction = enum(i32) {
            DirectionUnspecified = 0,
            Backward = 1,
            Forward = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const AutoInitialize = struct {
        line_id: ?i32 = null,

        pub const _desc_table = .{
            .line_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const LineConfig = struct {
    message_type: MessageType = @enumFromInt(0),
    lines: ArrayList(LineConfiguration),
    line_names: ArrayList(ManagedString),

    pub const _desc_table = .{
        .message_type = fd(3, .{ .Varint = .Simple }),
        .lines = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .line_names = fd(2, .{ .List = .String }),
    };

    pub const LineConfiguration = struct {
        axes: i32 = 0,
        ranges: ArrayList(Range),

        pub const _desc_table = .{
            .axes = fd(1, .{ .Varint = .Simple }),
            .ranges = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const Range = struct {
            channel: Channel = @enumFromInt(0),
            start: i32 = 0,
            end: i32 = 0,

            pub const _desc_table = .{
                .channel = fd(1, .{ .Varint = .Simple }),
                .start = fd(2, .{ .Varint = .Simple }),
                .end = fd(3, .{ .Varint = .Simple }),
            };

            pub const Channel = enum(i32) {
                ChannelUnspecified = 0,
                cc_link_1slot = 1,
                cc_link_2slot = 2,
                cc_link_3slot = 3,
                cc_link_4slot = 4,
                _,
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ServerVersion = struct {
    message_type: MessageType = @enumFromInt(0),
    major: i32 = 0,
    minor: i32 = 0,
    patch: i32 = 0,

    pub const _desc_table = .{
        .message_type = fd(4, .{ .Varint = .Simple }),
        .major = fd(1, .{ .Varint = .Simple }),
        .minor = fd(2, .{ .Varint = .Simple }),
        .patch = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const HallStatus = struct {
    message_type: MessageType = @enumFromInt(0),
    front: bool = false,
    back: bool = false,

    pub const _desc_table = .{
        .message_type = fd(1, .{ .Varint = .Simple }),
        .front = fd(2, .{ .Varint = .Simple }),
        .back = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CarrierStatus = struct {
    message_type: MessageType = @enumFromInt(0),
    id: i32 = 0,
    axis_idx: ?AxisIndices = null,
    location: f32 = 0,
    state: RegisterWr.Carrier.CarrierDescription.State = @enumFromInt(0),

    pub const _desc_table = .{
        .message_type = fd(5, .{ .Varint = .Simple }),
        .id = fd(1, .{ .Varint = .Simple }),
        .axis_idx = fd(2, .{ .SubMessage = {} }),
        .location = fd(3, .{ .FixedInt = .I32 }),
        .state = fd(4, .{ .Varint = .Simple }),
    };

    pub const AxisIndices = struct {
        main_axis: i32 = 0,
        aux_axis: i32 = 0,

        pub const _desc_table = .{
            .main_axis = fd(1, .{ .Varint = .Simple }),
            .aux_axis = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CommandStatus = struct {
    message_type: MessageType = @enumFromInt(0),
    received: bool = false,
    response: RegisterWr.CommandResponse = @enumFromInt(0),

    pub const _desc_table = .{
        .message_type = fd(3, .{ .Varint = .Simple }),
        .received = fd(1, .{ .Varint = .Simple }),
        .response = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RegisterX = struct {
    message_type: MessageType = @enumFromInt(0),
    cc_link_enabled: bool = false,
    command_ready: bool = false,
    command_received: bool = false,
    axis_cleared_carrier: bool = false,
    cleared_carrier: bool = false,
    servo_enabled: bool = false,
    emergency_stop_enabled: bool = false,
    paused: bool = false,
    motor_enabled: ?MotorEnabled = null,
    vdc_undervoltage_detected: bool = false,
    vdc_overvoltage_detected: bool = false,
    errors_cleared: bool = false,
    communication_error: ?CommunicationError = null,
    inverter_overheat_detected: bool = false,
    overcurrent_detected: ?OvercurrentDetected = null,
    hall_alarm: ?HallAlarm = null,
    wait_pull_carrier: ?WaitPullCarrier = null,
    wait_push_carrier: ?WaitPushCarrier = null,
    control_loop_max_time_exceeded: bool = false,
    initial_data_processing_request: bool = false,
    initial_data_setting_complete: bool = false,
    error_status: bool = false,
    remote_ready: bool = false,

    pub const _desc_table = .{
        .message_type = fd(24, .{ .Varint = .Simple }),
        .cc_link_enabled = fd(1, .{ .Varint = .Simple }),
        .command_ready = fd(2, .{ .Varint = .Simple }),
        .command_received = fd(3, .{ .Varint = .Simple }),
        .axis_cleared_carrier = fd(4, .{ .Varint = .Simple }),
        .cleared_carrier = fd(5, .{ .Varint = .Simple }),
        .servo_enabled = fd(6, .{ .Varint = .Simple }),
        .emergency_stop_enabled = fd(7, .{ .Varint = .Simple }),
        .paused = fd(8, .{ .Varint = .Simple }),
        .motor_enabled = fd(9, .{ .SubMessage = {} }),
        .vdc_undervoltage_detected = fd(10, .{ .Varint = .Simple }),
        .vdc_overvoltage_detected = fd(11, .{ .Varint = .Simple }),
        .errors_cleared = fd(12, .{ .Varint = .Simple }),
        .communication_error = fd(13, .{ .SubMessage = {} }),
        .inverter_overheat_detected = fd(14, .{ .Varint = .Simple }),
        .overcurrent_detected = fd(15, .{ .SubMessage = {} }),
        .hall_alarm = fd(16, .{ .SubMessage = {} }),
        .wait_pull_carrier = fd(17, .{ .SubMessage = {} }),
        .wait_push_carrier = fd(18, .{ .SubMessage = {} }),
        .control_loop_max_time_exceeded = fd(19, .{ .Varint = .Simple }),
        .initial_data_processing_request = fd(20, .{ .Varint = .Simple }),
        .initial_data_setting_complete = fd(21, .{ .Varint = .Simple }),
        .error_status = fd(22, .{ .Varint = .Simple }),
        .remote_ready = fd(23, .{ .Varint = .Simple }),
    };

    pub const MotorEnabled = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const CommunicationError = struct {
        from_prev: bool = false,
        from_next: bool = false,

        pub const _desc_table = .{
            .from_prev = fd(1, .{ .Varint = .Simple }),
            .from_next = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const OvercurrentDetected = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const HallAlarm = struct {
        axis1: ?Side = null,
        axis2: ?Side = null,
        axis3: ?Side = null,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .SubMessage = {} }),
            .axis2 = fd(2, .{ .SubMessage = {} }),
            .axis3 = fd(3, .{ .SubMessage = {} }),
        };

        pub const Side = struct {
            back: bool = false,
            front: bool = false,

            pub const _desc_table = .{
                .back = fd(1, .{ .Varint = .Simple }),
                .front = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const WaitPullCarrier = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const WaitPushCarrier = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RegisterY = struct {
    message_type: MessageType = @enumFromInt(0),
    cc_link_enable: bool = false,
    start_command: bool = false,
    reset_command_received: bool = false,
    axis_clear_carrier: bool = false,
    clear_carrier: bool = false,
    axis_servo_release: bool = false,
    servo_release: bool = false,
    emergency_stop: bool = false,
    temporary_pause: bool = false,
    clear_errors: bool = false,
    reset_pull_carrier: ?ResetPullCarrier = null,
    reset_push_carrier: ?ResetPushCarrier = null,

    pub const _desc_table = .{
        .message_type = fd(13, .{ .Varint = .Simple }),
        .cc_link_enable = fd(1, .{ .Varint = .Simple }),
        .start_command = fd(2, .{ .Varint = .Simple }),
        .reset_command_received = fd(3, .{ .Varint = .Simple }),
        .axis_clear_carrier = fd(4, .{ .Varint = .Simple }),
        .clear_carrier = fd(5, .{ .Varint = .Simple }),
        .axis_servo_release = fd(6, .{ .Varint = .Simple }),
        .servo_release = fd(7, .{ .Varint = .Simple }),
        .emergency_stop = fd(8, .{ .Varint = .Simple }),
        .temporary_pause = fd(9, .{ .Varint = .Simple }),
        .clear_errors = fd(10, .{ .Varint = .Simple }),
        .reset_pull_carrier = fd(11, .{ .SubMessage = {} }),
        .reset_push_carrier = fd(12, .{ .SubMessage = {} }),
    };

    pub const ResetPullCarrier = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ResetPushCarrier = struct {
        axis1: bool = false,
        axis2: bool = false,
        axis3: bool = false,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .Varint = .Simple }),
            .axis2 = fd(2, .{ .Varint = .Simple }),
            .axis3 = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RegisterWw = struct {
    message_type: MessageType = @enumFromInt(0),
    command: CommandCode = @enumFromInt(0),
    axis: i32 = 0,
    carrier: ?Carrier = null,

    pub const _desc_table = .{
        .message_type = fd(4, .{ .Varint = .Simple }),
        .command = fd(1, .{ .Varint = .Simple }),
        .axis = fd(2, .{ .Varint = .Simple }),
        .carrier = fd(3, .{ .SubMessage = {} }),
    };

    pub const CommandCode = enum(i32) {
        CommandCodeUnspecified = 0,
        None = 1,
        SetLineZero = 2,
        PositionMoveCarrierAxis = 18,
        PositionMoveCarrierLocation = 19,
        PositionMoveCarrierDistance = 20,
        SpeedMoveCarrierAxis = 21,
        SpeedMoveCarrierLocation = 22,
        SpeedMoveCarrierDistance = 23,
        IsolateForward = 24,
        IsolateBackward = 25,
        Calibration = 26,
        SetCarrierIdAtAxis = 29,
        PushForward = 30,
        PushBackward = 31,
        PullForward = 32,
        PullBackward = 33,
        PushTransitionForward = 34,
        PushTransitionBackward = 35,
        PullTransitionAxisForward = 36,
        PullTransitionAxisBackward = 37,
        PullTransitionLocationForward = 38,
        PullTransitionLocationBackward = 39,
        _,
    };

    pub const Carrier = struct {
        id: i32 = 0,
        enable_cas: bool = false,
        isolate_link_prev_axis: bool = false,
        isolate_link_next_axis: bool = false,
        speed: i32 = 0,
        acceleration: i32 = 0,
        target: ?target_union,

        pub const _target_case = enum {
            f32,
            u32,
            i32,
        };
        pub const target_union = union(_target_case) {
            f32: f32,
            u32: i32,
            i32: i32,
            pub const _union_desc = .{
                .f32 = fd(1, .{ .FixedInt = .I32 }),
                .u32 = fd(2, .{ .Varint = .Simple }),
                .i32 = fd(3, .{ .Varint = .ZigZagOptimized }),
            };
        };

        pub const _desc_table = .{
            .id = fd(4, .{ .Varint = .Simple }),
            .enable_cas = fd(5, .{ .Varint = .Simple }),
            .isolate_link_prev_axis = fd(6, .{ .Varint = .Simple }),
            .isolate_link_next_axis = fd(7, .{ .Varint = .Simple }),
            .speed = fd(8, .{ .Varint = .Simple }),
            .acceleration = fd(9, .{ .Varint = .Simple }),
            .target = fd(null, .{ .OneOf = target_union }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RegisterWr = struct {
    message_type: MessageType = @enumFromInt(0),
    command_response: CommandResponse = @enumFromInt(0),
    received_backward: ?CommunicationReceived = null,
    received_forward: ?CommunicationReceived = null,
    carrier: ?Carrier = null,

    pub const _desc_table = .{
        .message_type = fd(5, .{ .Varint = .Simple }),
        .command_response = fd(1, .{ .Varint = .Simple }),
        .received_backward = fd(2, .{ .SubMessage = {} }),
        .received_forward = fd(3, .{ .SubMessage = {} }),
        .carrier = fd(4, .{ .SubMessage = {} }),
    };

    pub const CommandResponse = enum(i32) {
        CommandResponseUnspecified = 0,
        NoError = 1,
        InvalidCommand = 2,
        CarrierNotFound = 3,
        HomingFailed = 4,
        InvalidParameter = 5,
        InvalidSystemState = 6,
        CarrierAlreadyExists = 7,
        InvalidAxis = 8,
        _,
    };

    pub const CommunicationReceived = struct {
        id: i32 = 0,
        kind: DriverMessageKind = @enumFromInt(0),
        failed_bcc: bool = false,

        pub const _desc_table = .{
            .id = fd(1, .{ .Varint = .Simple }),
            .kind = fd(2, .{ .Varint = .Simple }),
            .failed_bcc = fd(3, .{ .Varint = .Simple }),
        };

        pub const DriverMessageKind = enum(i32) {
            DriverMessageKindUnspecified = 0,
            none = 1,
            update = 2,
            prof_req = 3,
            prof_noti = 4,
            update_cali_home = 5,
            update_mech_angle_offset = 6,
            on_pos_req = 7,
            on_pos_rsp = 8,
            off_pos_req = 9,
            off_pos_rsp = 10,
            clear_carrier_info = 11,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Carrier = struct {
        axis1: ?CarrierDescription = null,
        axis2: ?CarrierDescription = null,
        axis3: ?CarrierDescription = null,

        pub const _desc_table = .{
            .axis1 = fd(1, .{ .SubMessage = {} }),
            .axis2 = fd(2, .{ .SubMessage = {} }),
            .axis3 = fd(3, .{ .SubMessage = {} }),
        };

        pub const CarrierDescription = struct {
            location: f32 = 0,
            id: i32 = 0,
            arrived: bool = false,
            auxiliary: bool = false,
            enabled: bool = false,
            quasi: bool = false,
            cas: ?CAS = null,
            state: State = @enumFromInt(0),

            pub const _desc_table = .{
                .location = fd(1, .{ .FixedInt = .I32 }),
                .id = fd(2, .{ .Varint = .Simple }),
                .arrived = fd(3, .{ .Varint = .Simple }),
                .auxiliary = fd(4, .{ .Varint = .Simple }),
                .enabled = fd(5, .{ .Varint = .Simple }),
                .quasi = fd(6, .{ .Varint = .Simple }),
                .cas = fd(7, .{ .SubMessage = {} }),
                .state = fd(8, .{ .Varint = .Simple }),
            };

            pub const State = enum(i32) {
                StateUnspecified = 0,
                None = 1,
                WarmupProgressing = 2,
                WarmupCompleted = 3,
                PosMoveProgressing = 4,
                PosMoveCompleted = 5,
                SpdMoveProgressing = 6,
                SpdMoveCompleted = 7,
                Auxiliary = 8,
                AuxiliaryCompleted = 9,
                ForwardCalibrationProgressing = 10,
                ForwardCalibrationCompleted = 11,
                BackwardCalibrationProgressing = 12,
                BackwardCalibrationCompleted = 13,
                ForwardIsolationProgressing = 16,
                ForwardIsolationCompleted = 17,
                BackwardIsolationProgressing = 18,
                BackwardIsolationCompleted = 19,
                ForwardRestartProgressing = 20,
                ForwardRestartCompleted = 21,
                BackwardRestartProgressing = 22,
                BackwardRestartCompleted = 23,
                PullForward = 25,
                PullForwardCompleted = 26,
                PullBackward = 27,
                PullBackwardCompleted = 28,
                Push = 29,
                PushCompleted = 30,
                Overcurrent = 31,
                _,
            };

            pub const CAS = struct {
                enabled: bool = false,
                triggered: bool = false,

                pub const _desc_table = .{
                    .enabled = fd(1, .{ .Varint = .Simple }),
                    .triggered = fd(2, .{ .Varint = .Simple }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
