syntax = "proto3";
package mmc;

enum Direction{
    DIRECTION_UNSPECIFIED = 0;
    BACKWARD = 1;
    FORWARD = 2;
}

message SendCommand{
    // TODO: Squeeze GetX, GetY, GetWw, GetWr to GetRegister
    message GetX{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message GetY{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message GetWr{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message GetWw{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message ReleaseAxisServo{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    // TODO: Squeeze StopPullCarrier and StopPushCarrier to StopPushPull
    message StopPullCarrier{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message StopPushCarrier{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message ClearErrors{
        int32 line_idx = 1;
        optional int32 axis_idx = 2;
    }

    message ClearCarrierInfo{
        int32 line_idx = 1;
        optional int32 axis_idx = 2;
    }

    message GetHallStatus{
        int32 line_idx = 1;
        int32 axis_idx = 2;
    }

    message GetCommandStatus{
        int32 command_id = 1;
    }
    message GetCarrierStatus{
        int32 line_idx = 1;
        oneof param{
            int32 carrier_id = 2;
            int32 axis_idx = 3;
        }
    }

    message NoParam {}

    message Calibrate{
        int32 line_idx = 1;
    }

    message SetLineZero{
        int32 line_idx = 1;
    }

    message AutoInitialize{
        message Lines{
            int32 line_idx = 1;
            int32 speed = 2;
            int32 acceleration = 3;
        }
        repeated Lines lines = 1;
    }

    message MoveCarrier{
        enum MoveType{
            MOVE_TYPE_UNSPECIFIED = 0;
            POSITION_AXIS = 1;
            POSITION_LOCATION = 2;
            POSITION_DISTANCE = 3;
            SPEED_AXIS = 4;
            SPEED_LOCATION = 5;
            SPEED_DISTANCE = 6;
        }
        int32 line_idx = 1;
        int32 carrier_id = 2;
        int32 speed = 3;
        int32 acceleration = 4;
        oneof target{
            int32 axis_id = 5;
            float location_distance = 6;
        }
        MoveType move_type = 7;
    }

    message PushCarrier{
        int32 line_idx = 1;
        int32 carrier_id = 2;
        Direction direction = 3;
        int32 speed = 4;
        int32 acceleration = 5;
        optional int32 axis_idx = 6;
    }

    message PullCarrier{
        int32 line_idx = 1;
        int32 axis_idx = 2;
        int32 carrier_id = 3;
        Direction direction = 4;
        int32 speed = 5;
        int32 acceleration = 6;
        optional float destination = 7;
    }

    message IsolateCarrier{
        int32 line_idx = 1;
        int32 axis_idx = 2;
        int32 carrier_id = 3;
        Direction direction = 4;
        Direction link_axis = 5;
    }

    // Following protobuf guideline to reserve deleted field number
    reserved 1,2,7;

    oneof command_kind{
        GetX get_x = 3;
        GetY get_y = 4;
        GetWr get_wr = 5;
        GetWw get_ww = 6;
        NoParam get_version = 8;
        ClearErrors clear_errors = 9;
        ClearCarrierInfo clear_carrier_info = 10;
        NoParam reset_mcl = 11;
        ReleaseAxisServo release_axis_servo = 12;
        StopPullCarrier stop_pull_carrier = 13;
        AutoInitialize auto_initialize = 14;
        StopPushCarrier stop_push_carrier = 15;
        MoveCarrier move_carrier = 16;
        PushCarrier push_carrier = 17;
        PullCarrier pull_carrier = 18;
        IsolateCarrier isolate_carrier = 19;
        GetCommandStatus get_command_status = 20;
        GetHallStatus get_hall_status = 21;
        GetCarrierStatus get_carrier_status = 22;
        Calibrate calibrate = 23;
        SetLineZero set_line_zero = 24;
    }
}

message Response{
    message LineConfig{
        message Line{
            int32 axes = 1;
            string name = 2;
        }
        repeated Line lines = 1;
    }

    message ServerVersion{
        int32 major = 1;
        int32 minor = 2;
        int32 patch = 3;
    }

    message HallStatus{
        bool front = 1;
        bool back = 2;
    }

    message CarrierStatus{
        int32 main_axis = 1;
        int32 aux_axis = 2;
        int32 line_idx = 4;
        float location = 5;
        int32 id = 6;
        RegisterWr.Carrier.Description.State state = 7;
        bool is_cas_triggered = 8;
    }

    message RegisterX{
        bool cc_link_enabled = 1;
        bool command_ready = 2;
        bool command_received = 3;
        bool axis_cleared_carrier = 4;
        bool cleared_carrier = 5;
        bool servo_enabled = 6;
        bool emergency_stop_enabled = 7;
        bool paused = 8;
        message MotorEnabled{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        MotorEnabled motor_enabled = 9;
        bool vdc_undervoltage_detected = 10;
        bool vdc_overvoltage_detected = 11;
        bool errors_cleared = 12;
        message CommunicationError{
            bool from_prev = 1;
            bool from_next = 2;
        }
        CommunicationError communication_error = 13;
        bool inverter_overheat_detected = 14;
        message OvercurrentDetected{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        OvercurrentDetected overcurrent_detected = 15;
        message HallAlarm{
            message Side{
                bool back = 1;
                bool front = 2;
            }
            Side axis1 = 1;
            Side axis2 = 2;
            Side axis3 = 3;
        }
        HallAlarm hall_alarm = 16;
        message WaitPullCarrier{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        WaitPullCarrier wait_pull_carrier = 17;
        message WaitPushCarrier{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        WaitPushCarrier wait_push_carrier = 18;
        bool control_loop_max_time_exceeded = 19;
        bool initial_data_processing_request = 20;
        bool initial_data_setting_complete = 21;
        bool error_status = 22;
        bool remote_ready = 23;
    }

    message RegisterY{
        bool cc_link_enable = 1;
        bool start_command = 2;
        bool reset_command_received = 3;
        bool axis_clear_carrier = 4;
        bool clear_carrier = 5;
        bool axis_servo_release = 6;
        bool servo_release = 7;
        bool emergency_stop = 8;
        bool temporary_pause = 9;
        bool clear_errors = 10;
        message ResetPullCarrier{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        ResetPullCarrier reset_pull_carrier = 11;
        message ResetPushCarrier{
            bool axis1 = 1;
            bool axis2 = 2;
            bool axis3 = 3;
        }
        ResetPushCarrier reset_push_carrier = 12;

    }

    message RegisterWw{
        enum CommandCode{
            COMMAND_CODE_UNSPECIFIED = 0;
            NONE = 1;
            SET_LINE_ZERO = 2;
            // "By Position" commands calculate carrier movement by constant hall
            // sensor position feedback, and is much more precise in destination.
            POSITION_MOVE_CARRIER_AXIS = 3;
            POSITION_MOVE_CARRIER_LOCATION = 4;
            POSITION_MOVE_CARRIER_DISTANCE = 5;
            // "By Speed" commands calculate carrier movement by constant hall
            // sensor speed feedback. It should mostly not be used, as the
            // destination position becomes far too imprecise. However, it is
            // meant to maintain a certain speed while the carrier is traveling,
            // and to avoid the requirement of having a known system position.
            SPEED_MOVE_CARRIER_AXIS = 6;
            SPEED_MOVE_CARRIER_LOCATION = 7;
            SPEED_MOVE_CARRIER_DISTANCE = 8;
            ISOLATE_FORWARD = 9;
            ISOLATE_BACKWARD = 10;
            CALIBRATION = 11;
            SET_CARRIER_ID_AT_AXIS = 12;
            PUSH_FORWARD = 13;
            PUSH_BACKWARD = 14;
            PULL_FORWARD = 15;
            PULL_BACKWARD = 16;
            PUSH_TRANSITION_FORWARD = 17;
            PUSH_TRANSITION_BACKWARD = 18;
            PULL_TRANSITION_AXIS_FORWARD = 19;
            PULL_TRANSITION_AXIS_BACKWARD = 20;
            PULL_TRANSITION_LOCATION_FORWARD = 21;
            PULL_TRANSITION_LOCATION_BACKWARD = 22;
        }
        CommandCode command = 1;
        int32 axis = 2;
        message Carrier{
            oneof target{
                float f32 = 1;
                int32 u32 = 2;
                sint32 i32 = 3;
            }
            int32 id = 4;
            bool enable_cas = 5;
            bool isolate_link_prev_axis = 6;
            bool isolate_link_next_axis = 7;
            int32 speed = 8;
            int32 acceleration = 9;
        }
        Carrier carrier = 3;
    }

    message RegisterWr{
        enum CommandResponse{
            COMMAND_RESPONSE_UNSPECIFIED = 0;
            NO_ERROR = 1;
            INVALID_COMMAND = 2;
            CARRIER_NOT_FOUND = 3;
            HOMING_FAILED = 4;
            INVALID_PARAMETER = 5;
            INVALID_SYSTEM_STATE = 6;
            CARRIER_ALREADY_EXISTS = 7;
            INVALID_AXIS = 8;
        }
        CommandResponse command_response = 1;
        message CommunicationReceived{
            int32 id = 1;
            enum DriverMessageKind{
                DRIVER_MESSAGE_KIND_UNSPECIFIED = 0;
                NONE = 1;
                UPDATE = 2;
                PROF_REQ = 3;
                PROF_NOTI = 4;
                UPDATE_CALI_HOME = 5;
                UPDATE_MECH_ANGLE_OFFSET = 6;
                ON_POS_REQ = 7;
                ON_POS_RSP = 8;
                OFF_POS_REQ = 9;
                OFF_POS_RSP = 10;
                CLEAR_CARRIER_INFO = 11;
            }
            DriverMessageKind kind = 2;
            bool failed_bcc = 3;
        }
        CommunicationReceived received_backward = 2;
        CommunicationReceived received_forward = 3;
        message Carrier{
            message Description{
                float location = 1;
                int32 id = 2;
                bool arrived = 3;
                bool auxiliary = 4;
                bool enabled = 5;
                bool quasi = 6;
                message CAS{
                    bool enabled = 1;
                    bool triggered = 2;
                }
                CAS cas = 7;
                enum State{
                    STATE_UNSPECIFIED = 0;
                    NONE = 1;

                    WARMUP_PROGRESSING = 2;
                    WARMUP_COMPLETED = 3;

                    POS_MOVE_PROGRESSING = 4;
                    POS_MOVE_COMPLETED = 5;
                    SPD_MOVE_PROGRESSING = 6;
                    SPD_MOVE_COMPLETED = 7;
                    AUXILIARY = 8;
                    AUXILIARY_COMPLETED = 9;

                    FORWARD_CALIBRATION_PROGRESSING = 10;
                    FORWARD_CALIBRATION_COMPLETED = 11;
                    BACKWARD_CALIBRATION_PROGRESSING = 12;
                    BACKWARD_CALIBRATION_COMPLETED = 13;

                    FORWARD_ISOLATION_PROGRESSING = 14;
                    FORWARD_ISOLATION_COMPLETED = 15;
                    BACKWARD_ISOLATION_PROGRESSING = 16;
                    BACKWARD_ISOLATION_COMPLETED = 17;
                    FORWARD_RESTART_PROGRESSING = 18;
                    FORWARD_RESTART_COMPLETED = 19;
                    BACKWARD_RESTART_PROGRESSING = 20;
                    BACKWARD_RESTART_COMPLETED = 21;

                    PULL_FORWARD = 22;
                    PULL_FORWARD_COMPLETED = 23;
                    PULL_BACKWARD = 24;
                    PULL_BACKWARD_COMPLETED = 25;
                    PUSH = 26;
                    PUSH_COMPLETED = 27;

                    OVERCURRENT = 28;
                }
                State state = 8;
            }
            Description axis1 = 1;
            Description axis2 = 2;
            Description axis3 = 3;
        }
        Carrier carrier = 4;

    }

    message CommandID{
        int32 command_id = 1;
    }

    message CommandStatus{
        enum Status {
            STATUS_UNSPECIFIED = 0;
            PROCESSING = 1;
            COMPLETED = 2;
            FAILED = 3;
            QUEUED = 4;
        }
        Status status = 1;
        enum ErrorType{
            ERROR_UNSPECIFIED = 0;
            CC_LINK_DISCONNECTED = 1;
            VDC_UNDERVOLTAGE_DETECTED = 2;
            VDC_OVERVOLTAGE_DETECTED = 3;
            COMMUNICATION_ERROR_DETECTED = 4;
            INVERTER_OVERHEAT_DETECTED = 5;
            OVERCURRENT_DETECTED = 6;
            CONTROL_LOOP_MAX_TIME_EXCEEDED = 7;
            INVALID_COMMAND = 8;
            CARRIER_NOT_FOUND = 9;
            HOMING_FAILED = 10;
            INVALID_PARAMETER = 11;
            INVALID_SYSTEM_STATE = 12;
            CARRIER_ALREADY_EXISTS = 13;
            INVALID_AXIS = 14;
            UNEXPECTED = 15;
        }
        optional ErrorType error_response = 2;
    }

    message SystemError{
        enum ErrorType{
            ERROR_UNSPECIFIED = 0;
            CC_LINK_DISCONNECTED = 1;
            VDC_UNDERVOLTAGE_DETECTED = 2;
            VDC_OVERVOLTAGE_DETECTED = 3;
            COMMUNICATION_ERROR_DETECTED = 4;
            INVERTER_OVERHEAT_DETECTED = 5;
            OVERCURRENT_DETECTED = 6;
            CONTROL_LOOP_MAX_TIME_EXCEEDED = 7;
        }
        message ErrorLocation{
            ErrorType error_type = 1;
            int32 axis_idx = 2;
        }
        repeated ErrorLocation errors = 1;
    }

    oneof response{
        LineConfig line_config = 1;
        ServerVersion server_version = 2;
        HallStatus hall = 3;
        CarrierStatus carrier = 4;
        RegisterX x = 5;
        RegisterY y = 6;
        RegisterWr wr = 7;
        RegisterWw ww = 8;
        CommandID command_id = 9;
        CommandStatus command_status = 10;
        SystemError system_error = 11;
    }
}
