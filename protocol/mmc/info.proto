syntax = "proto3";
package mmc.info;

/// Range can be axis range or driver range. End ID is inclusive.
message Range {
  uint32 start_id = 1;
  uint32 end_id = 2;
}

/// Contains multiple ids, possibly containing only one id.
message Ids {
  repeated uint32 ids = 1;
}

/// API for requesting information from the PMF's MMC Server
message Request {
  /// Available info from the server
  oneof body {
    /// Get command(s) status
    Command command = 1;
    /// Get system information
    System system = 2;
  }
  /// Request for a command status from the server. If no command ID is
  /// provided, then request for statuses of all commands from the server.
  /// Expected response: Info.Response.Commands
  message Command { optional uint32 id = 1; }

  /// Request for system status from the server. At least, either driver, axis,
  /// or carrier flag should be on to retrieve the interested information. If the
  /// source are driver range or axis range, it will retrieve any set flag
  /// information from the system based on the specified range. If the carrier
  /// ids is provided for the range, it will retrieve any set flag information
  /// from the system based on the location of the carrier.
  message System {
    /// Line ID
    uint32 line_id = 1;
    /// Flag for retrieving driver information from the server
    bool driver = 2;
    /// Flag for retrieving axis information from the server
    bool axis = 3;
    /// Flag for retrieving carrier information from the server
    bool carrier = 4;
    /// Parameter to indicate the source of information that want to be retrieved
    oneof source {
      /// Retrieve the information from the driver range
      Range driver_range = 5;
      /// Retrieve the information from the axis range
      Range axis_range = 6;
      /// Retrieve the information from the location of the carrier(s)
      Ids carriers = 7;
    }
  }
}

/// Response description to the request info API
message Response {
  oneof body {
    /// Commands information response
    Commands commands = 1;
    /// System information response
    System system = 2;
    /// Error kind if this response's request was invalid
    RequestErrorKind request_error = 3;
  }

  message Commands { 
    repeated Command commands = 1;

    /// Command information.
    /// `error_response` is returned if the status is FAILED.
    message Command {
      /// Command ID
      uint32 id = 1;
      /// Command status
      Status status = 2;
      /// Command error kind, if failed.
      optional ErrorKind error_response = 3;
      enum Status {
        /// Default enum value. Should never be used.
        STATUS_UNSPECIFIED = 0;
        /// Command is being executed by the server.
        STATUS_PROGRESSING = 1;
        /// Command execution is completed.
        STATUS_COMPLETED = 2;
        /// Command execution is failed. `error_response` is returned as well.
        STATUS_FAILED = 3;
        /// Command is waiting to be executed by the server.
        STATUS_QUEUED = 4;
      }
      enum ErrorKind {
        ERROR_KIND_UNSPECIFIED = 0;
        ERROR_KIND_INVALID_COMMAND = 1;
        ERROR_KIND_CARRIER_NOT_FOUND = 2;
        ERROR_KIND_HOMING_FAILED = 3;
        ERROR_KIND_INVALID_PARAMETER = 4;
        ERROR_KIND_INVALID_SYSTEM_STATE = 5;
        ERROR_KIND_CARRIER_ALREADY_EXISTS = 6;
        ERROR_KIND_INVALID_AXIS = 7;
      }
    }  
  }
  
  /// System information description. Validation is required to check if
  /// each field has the requested information.
  message System {
    /// Line ID
    uint32 line_id = 1;
    /// Array of driver's information
    repeated Driver.Info driver_infos = 2;
    /// Array of driver's error
    repeated Driver.Error driver_errors = 3;
    /// Array of axis' information
    repeated Axis.Info axis_infos = 4;
    /// Array of axis' error
    repeated Axis.Error axis_errors = 5;
    /// Array of carrier's information
    repeated Carrier.Info carrier_infos = 6;

    /// Complete axis info and error description.
    message Axis {
      /// Axis' info description
      message Info {
        /// Axis ID
        uint32 id = 1;      
        /// Whether the motor is controlling a carrier or not
        bool motor_enabled = 2;
        /// Waiting for a carrier to be pulled on the axis
        bool waiting_pull = 3;
        /// Waiting for a carrier arriving on the axis to be automatically pushed
        bool waiting_push = 4;
        /// Detected initialized carrier ID on the carrier
        uint32 carrier_id = 5;
        /// Hall alarm status of the axis
        HallAlarm hall_alarm = 6;

        /// Hall alarm status of the axis
        message HallAlarm {
          bool back = 1;
          bool front = 2;
        }
      }

      /// Axis' error description
      message Error {
        /// Axis ID
        uint32 id = 1;
        /// Overcurrent error flag 
        bool overcurrent = 2; 
      }
    }

    /// Complete driver info and error description
    message Driver {
      /// Driver's info description
      message Info {
        /// Driver ID
        uint32 id = 1;
        /// Connection status between driver and CC link
        bool connected = 2;
        /// Whether the driver is ready to receive command or not
        bool available = 3;
        /// Servo status
        bool servo_enabled = 4;
        /// Emergency stop status
        bool stopped = 5;
        /// Driver pause status
        bool paused = 6;
      }

      /// Driver's error description
      message Error {
        /// Driver ID
        uint32 id = 1;
        /// Flag when control loop exceeding maximum loop time
        bool control_loop_time_exceeded = 2;
        /// Flag when the inverter is overheated
        bool inverter_overheat = 3;
        PowerError power_error = 4;
        CommError communication_error = 5;

        message CommError {
          /// Flag when there is communication error from previous driver
          bool from_prev = 1;
          /// Flag when there is communication error from next driver
          bool from_next = 2;
        }
        message PowerError {
          /// Flag when the driver detects overvoltage
          bool overvoltage = 1;
          /// Flag when the driver detects undervoltage
          bool undervoltage = 2;
        }
      }
    }

    /// Complete carrier description
    message Carrier {
      /// Carrier's info description
      message Info {
        /// Carrier ID
        uint32 id = 1;
        /// Position of the carrier
        float position = 2;
        /// Axis ID position of the carrier
        Axis axis = 3;
        /// Carrier's collision avoidance system (CAS) status
        Cas cas = 4;
        /// Carrier State
        State state = 5;

        message Axis {
          /// ID of the main axis
          uint32 main = 1;
          /// ID of the auxiliary axis
          optional uint32 auxiliary = 2;
        }
        message Cas {
          bool enabled = 1;
          bool triggered = 2;
        }
        enum State {
          CARRIER_STATE_NONE = 0;
          CARRIER_STATE_CALIBRATING = 1;
          CARRIER_STATE_CALIBRATE_COMPLETED = 2;
          CARRIER_STATE_MOVING = 3;
          CARRIER_STATE_MOVE_COMPLETED = 4;
          CARRIER_STATE_ISOLATING = 5;
          CARRIER_STATE_ISOLATE_COMPLETED = 6;
          CARRIER_STATE_PUSHING = 7;
          CARRIER_STATE_PUSH_COMPLETED = 8;
          CARRIER_STATE_PULLING = 9;
          CARRIER_STATE_PULL_COMPLETED = 10;
          CARRIER_STATE_OVERCURRENT = 11;
        }
      }
    }
  }

  /// Error kind description
  enum RequestErrorKind {
    /// Default enum value. Should never be used.
    INFO_REQUEST_ERROR_UNSPECIFIED = 0;
    /// Attempted to use line ID outside of the configured line
    INFO_REQUEST_ERROR_INVALID_LINE = 1;
    /// Attempted to use axis ID outside of the configured axis
    INFO_REQUEST_ERROR_INVALID_AXIS = 2;
    /// Attempted to use driver ID outside of the configured driver
    INFO_REQUEST_ERROR_INVALID_DRIVER = 3;
    /// Attempted to retrieve uninitialized carrier information
    INFO_REQUEST_ERROR_CARRIER_NOT_FOUND = 4;
    /// Attempted to retrieve info when the CC Link connection is not
    /// established
    INFO_REQUEST_ERROR_CC_LINK_DISCONNECTED = 5;
    /// A request missing the required parameter
    INFO_REQUEST_ERROR_MISSING_PARAMETER = 6;
    /// Attempted to request unknown command info
    INFO_REQUEST_ERROR_COMMAND_NOT_FOUND = 7;
  }
}
